AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  oboku-api

  Sample SAM Template for oboku-api

Parameters:
  CoverBucketName:
    Type: String
    Default: "oboku-covers"
  Environment:
    Type: String
    Default: "PROD"
    AllowedValues:
      - DEV
      - PROD

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    BinaryMediaTypes:
      - "*/*"
    # Cors:
    #   AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
    #   AllowHeaders: "'*'"
    #   AllowOrigin: "'*'"
    #   AllowCredentials: false
  Function:
    Timeout: 900
    Environment:
      Variables:
        Foo: Bar
        ENV: !Ref Environment
  # Auth:
  #     DefaultAuthorizer: CognitoAuthorizer
  #     Authorizers:
  #       CognitoAuthorizer:
  #         UserPoolArn: yourUserPool
  #     AddDefaultAuthorizerToCorsPreflight: False

Resources:
  RefreshMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/refreshMetadata
      Handler: main.fn
      Runtime: nodejs14.x
      Events:
        Post:
          Type: Api
          Properties:
            Path: /refresh-metadata
            Method: ANY
  RefreshMetadataLongProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/refreshMetadataLongProcess
      Handler: main.fn
      Runtime: nodejs14.x
      MemorySize: 512
      Policies:
        S3CrudPolicy:
          BucketName: !Ref CoverBucketName
  SyncDataSourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/syncDataSource
      Handler: main.fn
      Runtime: nodejs14.x
      Events:
        Post:
          Type: Api
          Properties:
            Path: /sync-datasource
            Method: ANY
  SyncDataSourceLongProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/syncDataSourceLongProcess
      Handler: main.fn
      Runtime: nodejs14.x
      MemorySize: 512
      Policies:
        S3ReadPolicy:
          BucketName: !Ref CoverBucketName
  CorsProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/corsProxy
      Handler: main.fn
      Runtime: nodejs14.x
      Events:
        AnyRequest:
          Type: Api 
          Properties:
            Path: /cors
            Method: ANY
  SigninFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/signin
      Handler: main.fn
      Runtime: nodejs14.x
      Events:
        Post:
          Type: Api 
          Properties:
            Path: /signin
            Method: ANY
  CoverFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/cover
      Handler: main.fn
      Runtime: nodejs14.x
      Policies:
        S3ReadPolicy:
          BucketName: !Ref CoverBucketName
      Events:
        Post:
          Type: Api 
          Properties:
            Path: /cover/{id}
            Method: ANY
  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/signup
      Handler: main.fn
      Runtime: nodejs14.x
      Events:
        Post:
          Type: Api 
          Properties:
            Path: /signup
            Method: ANY
  RequestAccess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/requestAccess
      Handler: main.fn
      Runtime: nodejs14.x
      Events:
        AnyRequest:
          Type: Api 
          Properties:
            Path: /requestaccess
            Method: ANY
  CoverBucket:
    Type: AWS::S3::Bucket