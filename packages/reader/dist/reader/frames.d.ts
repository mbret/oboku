import { Context } from "./context";
import { Pagination } from "./pagination";
import { ReadingItem } from "./readingItem";
export declare const normalizeEventPositions: (context: Context, pagination: Pagination, e: PointerEvent | MouseEvent | TouchEvent, readingItem: ReadingItem | undefined) => {
    x: number;
    clientX: number;
    height: number;
    isPrimary: boolean;
    pointerId: number;
    pointerType: string;
    pressure: number;
    tangentialPressure: number;
    tiltX: number;
    tiltY: number;
    twist: number;
    width: number;
    getCoalescedEvents(): PointerEvent[];
    getPredictedEvents(): PointerEvent[];
    altKey: boolean;
    button: number;
    buttons: number;
    clientY: number;
    ctrlKey: boolean;
    metaKey: boolean;
    movementX: number;
    movementY: number;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    relatedTarget: EventTarget | null;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    y: number;
    getModifierState(keyArg: string): boolean;
    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;
    detail: number;
    view: Window | null;
    which: number;
    bubbles: boolean;
    cancelBubble: boolean;
    cancelable: boolean;
    composed: boolean;
    currentTarget: EventTarget | null;
    defaultPrevented: boolean;
    eventPhase: number;
    isTrusted: boolean;
    returnValue: boolean;
    srcElement: EventTarget | null;
    target: EventTarget | null;
    timeStamp: number;
    type: string;
    composedPath(): EventTarget[];
    composedPath(): EventTarget[];
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    preventDefault(): void;
    preventDefault(): void;
    stopImmediatePropagation(): void;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    stopPropagation(): void;
    AT_TARGET: number;
    BUBBLING_PHASE: number;
    CAPTURING_PHASE: number;
    NONE: number;
} | {
    x: number;
    clientX: number;
    altKey: boolean;
    button: number;
    buttons: number;
    clientY: number;
    ctrlKey: boolean;
    metaKey: boolean;
    movementX: number;
    movementY: number;
    offsetX: number;
    offsetY: number;
    pageX: number;
    pageY: number;
    relatedTarget: EventTarget | null;
    screenX: number;
    screenY: number;
    shiftKey: boolean;
    y: number;
    getModifierState(keyArg: string): boolean;
    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;
    detail: number;
    view: Window | null;
    which: number;
    bubbles: boolean;
    cancelBubble: boolean;
    cancelable: boolean;
    composed: boolean;
    currentTarget: EventTarget | null;
    defaultPrevented: boolean;
    eventPhase: number;
    isTrusted: boolean;
    returnValue: boolean;
    srcElement: EventTarget | null;
    target: EventTarget | null;
    timeStamp: number;
    type: string;
    composedPath(): EventTarget[];
    composedPath(): EventTarget[];
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    preventDefault(): void;
    preventDefault(): void;
    stopImmediatePropagation(): void;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    stopPropagation(): void;
    AT_TARGET: number;
    BUBBLING_PHASE: number;
    CAPTURING_PHASE: number;
    NONE: number;
} | {
    x: number;
    clientX?: number | undefined;
    altKey: boolean;
    changedTouches: TouchList;
    ctrlKey: boolean;
    metaKey: boolean;
    shiftKey: boolean;
    targetTouches: TouchList;
    touches: TouchList;
    detail: number;
    view: Window | null;
    which: number;
    bubbles: boolean;
    cancelBubble: boolean;
    cancelable: boolean;
    composed: boolean;
    currentTarget: EventTarget | null;
    defaultPrevented: boolean;
    eventPhase: number;
    isTrusted: boolean;
    returnValue: boolean;
    srcElement: EventTarget | null;
    target: EventTarget | null;
    timeStamp: number;
    type: string;
    composedPath(): EventTarget[];
    composedPath(): EventTarget[];
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    preventDefault(): void;
    preventDefault(): void;
    stopImmediatePropagation(): void;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
    stopPropagation(): void;
    AT_TARGET: number;
    BUBBLING_PHASE: number;
    CAPTURING_PHASE: number;
    NONE: number;
};
export declare const translateFramePositionIntoPage: (context: Context, pagination: Pagination, position: {
    x: number;
    y: number;
}, readingItem: ReadingItem | undefined) => {
    x: number;
};
